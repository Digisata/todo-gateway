{
  "swagger": "2.0",
  "info": {
    "title": "Auth Service",
    "version": "v1.0.0"
  },
  "tags": [
    {
      "name": "AuthService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/auth-service/api/v1/auth/login-admin": {
      "post": {
        "summary": "Admin login",
        "description": "This API for admin login",
        "operationId": "AuthService_LoginAdmin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoAuthBaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoLoginRequest"
            }
          }
        ],
        "tags": [
          "Auth"
        ],
        "security": []
      }
    },
    "/auth-service/api/v1/auth/login-committee": {
      "post": {
        "summary": "Committee login",
        "description": "This API for committee login",
        "operationId": "AuthService_LoginCommittee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoAuthBaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoLoginRequest"
            }
          }
        ],
        "tags": [
          "Auth"
        ],
        "security": []
      }
    },
    "/auth-service/api/v1/auth/login-customer": {
      "post": {
        "summary": "Customer login",
        "description": "This API for customer login",
        "operationId": "AuthService_LoginCustomer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoAuthBaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoLoginRequest"
            }
          }
        ],
        "tags": [
          "Auth"
        ],
        "security": []
      }
    },
    "/auth-service/api/v1/auth/logout": {
      "post": {
        "summary": "User logout",
        "description": "This API for user logout",
        "operationId": "AuthService_Logout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoAuthBaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoLogoutRequest"
            }
          }
        ],
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth-service/api/v1/auth/refresh-token": {
      "post": {
        "summary": "Refresh token",
        "description": "This API for refresh token",
        "operationId": "AuthService_RefreshToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoAuthBaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoRefreshTokenRequest"
            }
          }
        ],
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth-service/api/v1/auth/verify": {
      "get": {
        "summary": "Verify request",
        "description": "This API for verify request",
        "operationId": "AuthService_Verify",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoAuthBaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth-service/api/v1/invitation-categories": {
      "get": {
        "summary": "Get all invitation category",
        "description": "This API for get all invitation category",
        "operationId": "AuthService_GetAllInvitationCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoGetAllInvitationCategoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Invitation Categories"
        ]
      },
      "post": {
        "summary": "Create invitation category",
        "description": "This API for create invitation category",
        "operationId": "AuthService_CreateInvitationCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoInvitationCategoryBaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoCreateInvitationCategoryRequest"
            }
          }
        ],
        "tags": [
          "Invitation Categories"
        ]
      }
    },
    "/auth-service/api/v1/invitation-categories/{id}": {
      "get": {
        "summary": "Get invitation category by id",
        "description": "This API for get invitation category by id",
        "operationId": "AuthService_GetInvitationCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoInvitationCategoryBaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Invitation Categories"
        ]
      },
      "delete": {
        "summary": "Delete invitation category by id",
        "description": "This API for delete invitation category by id",
        "operationId": "AuthService_DeleteInvitationCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoInvitationCategoryBaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Invitation Categories"
        ]
      },
      "patch": {
        "summary": "Update invitation category by id",
        "description": "This API for update invitation category by id",
        "operationId": "AuthService_UpdateInvitationCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoInvitationCategoryBaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthServiceUpdateInvitationCategoryBody"
            }
          }
        ],
        "tags": [
          "Invitation Categories"
        ]
      }
    },
    "/auth-service/api/v1/profiles": {
      "get": {
        "summary": "Get profile",
        "description": "This API for get profile",
        "operationId": "AuthService_GetProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoAuthBaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Profiles"
        ]
      }
    },
    "/auth-service/api/v1/profiles/change-password": {
      "put": {
        "summary": "Change password",
        "description": "This API for change password",
        "operationId": "AuthService_ChangePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoAuthBaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoChangePasswordRequest"
            }
          }
        ],
        "tags": [
          "Profiles"
        ]
      }
    },
    "/auth-service/api/v1/socials": {
      "get": {
        "summary": "Get all social",
        "description": "This API for get all social",
        "operationId": "AuthService_GetAllSocial",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoGetAllSocialResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Socials"
        ]
      },
      "post": {
        "summary": "Create social",
        "description": "This API for create social",
        "operationId": "AuthService_CreateSocial",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoSocialBaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoCreateSocialRequest"
            }
          }
        ],
        "tags": [
          "Socials"
        ]
      }
    },
    "/auth-service/api/v1/socials/{id}": {
      "get": {
        "summary": "Get social by id",
        "description": "This API for get social by id",
        "operationId": "AuthService_GetSocial",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoSocialBaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Socials"
        ]
      },
      "delete": {
        "summary": "Delete social by id",
        "description": "This API for delete social by id",
        "operationId": "AuthService_DeleteSocial",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoSocialBaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Socials"
        ]
      },
      "patch": {
        "summary": "Update social by id",
        "description": "This API for update social by id",
        "operationId": "AuthService_UpdateSocial",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoSocialBaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthServiceUpdateSocialBody"
            }
          }
        ],
        "tags": [
          "Socials"
        ]
      }
    },
    "/auth-service/api/v1/users": {
      "get": {
        "summary": "Get all user",
        "description": "This API for get all user",
        "operationId": "AuthService_GetAllUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoGetAllUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "post": {
        "summary": "Create user",
        "description": "This API for create user",
        "operationId": "AuthService_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoAuthBaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoCreateUserRequest"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/auth-service/api/v1/users/{id}": {
      "get": {
        "summary": "Get user by id",
        "description": "This API for get user by id",
        "operationId": "AuthService_GetUserByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoAuthBaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "summary": "Delete user by id",
        "description": "This API for delete user by id",
        "operationId": "AuthService_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoAuthBaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "summary": "Update user by id",
        "description": "This API for update user by id",
        "operationId": "AuthService_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoAuthBaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthServiceUpdateUserBody"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    }
  },
  "definitions": {
    "AuthServiceUpdateInvitationCategoryBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "AuthServiceUpdateSocialBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "AuthServiceUpdateUserBody": {
      "type": "object",
      "properties": {
        "customer_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "note": {
          "type": "string"
        }
      }
    },
    "protoAuthBaseResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/protobufAny"
        },
        "paging": {
          "$ref": "#/definitions/protoPaging"
        }
      }
    },
    "protoChangePasswordRequest": {
      "type": "object",
      "properties": {
        "old_password": {
          "type": "string"
        },
        "new_password": {
          "type": "string"
        }
      }
    },
    "protoCreateInvitationCategoryRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "protoCreateSocialRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "protoCreateUserRequest": {
      "type": "object",
      "properties": {
        "customer_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "role": {
          "type": "integer",
          "format": "int32"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "note": {
          "type": "string"
        }
      },
      "title": "Users"
    },
    "protoGetAllInvitationCategoryResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protoGetInvitationCategoryByIDResponse"
          }
        },
        "paging": {
          "$ref": "#/definitions/protoInvitationCategoryPaging"
        }
      }
    },
    "protoGetAllSocialResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protoGetSocialByIDResponse"
          }
        },
        "paging": {
          "$ref": "#/definitions/protoSocialPaging"
        }
      }
    },
    "protoGetAllUserResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protoGetUserByIDResponse"
          }
        },
        "paging": {
          "$ref": "#/definitions/protoPaging"
        }
      }
    },
    "protoGetInvitationCategoryByIDResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "protoGetSocialByIDResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "protoGetUserByIDResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "customer_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "role": {
          "type": "integer",
          "format": "int32"
        },
        "is_active": {
          "type": "boolean"
        },
        "note": {
          "type": "string"
        },
        "created_at": {
          "type": "integer",
          "format": "int32"
        },
        "updated_at": {
          "type": "integer",
          "format": "int32"
        },
        "deleted_at": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "protoInvitationCategoryBaseResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/protobufAny"
        },
        "paging": {
          "$ref": "#/definitions/protoInvitationCategoryPaging"
        }
      }
    },
    "protoInvitationCategoryPaging": {
      "type": "object",
      "properties": {
        "current_page": {
          "type": "integer",
          "format": "int32"
        },
        "total_page": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "protoLoginRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "protoLogoutRequest": {
      "type": "object",
      "properties": {
        "refresh_token": {
          "type": "string"
        }
      }
    },
    "protoPaging": {
      "type": "object",
      "properties": {
        "current_page": {
          "type": "integer",
          "format": "int32"
        },
        "total_page": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "protoRefreshTokenRequest": {
      "type": "object",
      "properties": {
        "refresh_token": {
          "type": "string"
        }
      }
    },
    "protoSocialBaseResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/protobufAny"
        },
        "paging": {
          "$ref": "#/definitions/protoSocialPaging"
        }
      }
    },
    "protoSocialPaging": {
      "type": "object",
      "properties": {
        "current_page": {
          "type": "integer",
          "format": "int32"
        },
        "total_page": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "description": "Authentication token, prefixed by Bearer: Bearer \u003ctoken\u003e",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}
