// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: auth_service.proto

package stubs

import (
	context "context"
	invitation_category "github.com/digisata/auth-service/stubs/invitation-category"
	social "github.com/digisata/auth-service/stubs/social"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AuthService_Verify_FullMethodName                   = "/proto.AuthService/Verify"
	AuthService_LoginAdmin_FullMethodName               = "/proto.AuthService/LoginAdmin"
	AuthService_LoginCustomer_FullMethodName            = "/proto.AuthService/LoginCustomer"
	AuthService_LoginCommittee_FullMethodName           = "/proto.AuthService/LoginCommittee"
	AuthService_RefreshToken_FullMethodName             = "/proto.AuthService/RefreshToken"
	AuthService_Logout_FullMethodName                   = "/proto.AuthService/Logout"
	AuthService_CreateUser_FullMethodName               = "/proto.AuthService/CreateUser"
	AuthService_GetAllUser_FullMethodName               = "/proto.AuthService/GetAllUser"
	AuthService_GetUserByID_FullMethodName              = "/proto.AuthService/GetUserByID"
	AuthService_UpdateUser_FullMethodName               = "/proto.AuthService/UpdateUser"
	AuthService_DeleteUser_FullMethodName               = "/proto.AuthService/DeleteUser"
	AuthService_GetProfile_FullMethodName               = "/proto.AuthService/GetProfile"
	AuthService_ChangePassword_FullMethodName           = "/proto.AuthService/ChangePassword"
	AuthService_CreateSocial_FullMethodName             = "/proto.AuthService/CreateSocial"
	AuthService_GetSocial_FullMethodName                = "/proto.AuthService/GetSocial"
	AuthService_GetAllSocial_FullMethodName             = "/proto.AuthService/GetAllSocial"
	AuthService_UpdateSocial_FullMethodName             = "/proto.AuthService/UpdateSocial"
	AuthService_DeleteSocial_FullMethodName             = "/proto.AuthService/DeleteSocial"
	AuthService_CreateInvitationCategory_FullMethodName = "/proto.AuthService/CreateInvitationCategory"
	AuthService_GetInvitationCategory_FullMethodName    = "/proto.AuthService/GetInvitationCategory"
	AuthService_GetAllInvitationCategory_FullMethodName = "/proto.AuthService/GetAllInvitationCategory"
	AuthService_UpdateInvitationCategory_FullMethodName = "/proto.AuthService/UpdateInvitationCategory"
	AuthService_DeleteInvitationCategory_FullMethodName = "/proto.AuthService/DeleteInvitationCategory"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	// Auth
	Verify(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthBaseResponse, error)
	LoginAdmin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthBaseResponse, error)
	LoginCustomer(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthBaseResponse, error)
	LoginCommittee(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthBaseResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*AuthBaseResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*AuthBaseResponse, error)
	// Users
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*AuthBaseResponse, error)
	GetAllUser(ctx context.Context, in *GetAllUserRequest, opts ...grpc.CallOption) (*GetAllUserResponse, error)
	GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*AuthBaseResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*AuthBaseResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*AuthBaseResponse, error)
	// Profiles
	GetProfile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthBaseResponse, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*AuthBaseResponse, error)
	// Socials
	CreateSocial(ctx context.Context, in *social.CreateSocialRequest, opts ...grpc.CallOption) (*social.SocialBaseResponse, error)
	GetSocial(ctx context.Context, in *social.GetSocialByIDRequest, opts ...grpc.CallOption) (*social.SocialBaseResponse, error)
	GetAllSocial(ctx context.Context, in *social.GetAllSocialRequest, opts ...grpc.CallOption) (*social.GetAllSocialResponse, error)
	UpdateSocial(ctx context.Context, in *social.UpdateSocialByIDRequest, opts ...grpc.CallOption) (*social.SocialBaseResponse, error)
	DeleteSocial(ctx context.Context, in *social.DeleteSocialByIDRequest, opts ...grpc.CallOption) (*social.SocialBaseResponse, error)
	// Invitation Categories
	CreateInvitationCategory(ctx context.Context, in *invitation_category.CreateInvitationCategoryRequest, opts ...grpc.CallOption) (*invitation_category.InvitationCategoryBaseResponse, error)
	GetInvitationCategory(ctx context.Context, in *invitation_category.GetInvitationCategoryByIDRequest, opts ...grpc.CallOption) (*invitation_category.InvitationCategoryBaseResponse, error)
	GetAllInvitationCategory(ctx context.Context, in *invitation_category.GetAllInvitationCategoryRequest, opts ...grpc.CallOption) (*invitation_category.GetAllInvitationCategoryResponse, error)
	UpdateInvitationCategory(ctx context.Context, in *invitation_category.UpdateInvitationCategoryByIDRequest, opts ...grpc.CallOption) (*invitation_category.InvitationCategoryBaseResponse, error)
	DeleteInvitationCategory(ctx context.Context, in *invitation_category.DeleteInvitationCategoryByIDRequest, opts ...grpc.CallOption) (*invitation_category.InvitationCategoryBaseResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Verify(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) LoginAdmin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_LoginAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) LoginCustomer(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_LoginCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) LoginCommittee(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_LoginCommittee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*AuthBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*AuthBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*AuthBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAllUser(ctx context.Context, in *GetAllUserRequest, opts ...grpc.CallOption) (*GetAllUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllUserResponse)
	err := c.cc.Invoke(ctx, AuthService_GetAllUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*AuthBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_GetUserByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*AuthBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*AuthBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetProfile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_GetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*AuthBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateSocial(ctx context.Context, in *social.CreateSocialRequest, opts ...grpc.CallOption) (*social.SocialBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(social.SocialBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_CreateSocial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetSocial(ctx context.Context, in *social.GetSocialByIDRequest, opts ...grpc.CallOption) (*social.SocialBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(social.SocialBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_GetSocial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAllSocial(ctx context.Context, in *social.GetAllSocialRequest, opts ...grpc.CallOption) (*social.GetAllSocialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(social.GetAllSocialResponse)
	err := c.cc.Invoke(ctx, AuthService_GetAllSocial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateSocial(ctx context.Context, in *social.UpdateSocialByIDRequest, opts ...grpc.CallOption) (*social.SocialBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(social.SocialBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdateSocial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteSocial(ctx context.Context, in *social.DeleteSocialByIDRequest, opts ...grpc.CallOption) (*social.SocialBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(social.SocialBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_DeleteSocial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateInvitationCategory(ctx context.Context, in *invitation_category.CreateInvitationCategoryRequest, opts ...grpc.CallOption) (*invitation_category.InvitationCategoryBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(invitation_category.InvitationCategoryBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_CreateInvitationCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetInvitationCategory(ctx context.Context, in *invitation_category.GetInvitationCategoryByIDRequest, opts ...grpc.CallOption) (*invitation_category.InvitationCategoryBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(invitation_category.InvitationCategoryBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_GetInvitationCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAllInvitationCategory(ctx context.Context, in *invitation_category.GetAllInvitationCategoryRequest, opts ...grpc.CallOption) (*invitation_category.GetAllInvitationCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(invitation_category.GetAllInvitationCategoryResponse)
	err := c.cc.Invoke(ctx, AuthService_GetAllInvitationCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateInvitationCategory(ctx context.Context, in *invitation_category.UpdateInvitationCategoryByIDRequest, opts ...grpc.CallOption) (*invitation_category.InvitationCategoryBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(invitation_category.InvitationCategoryBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdateInvitationCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteInvitationCategory(ctx context.Context, in *invitation_category.DeleteInvitationCategoryByIDRequest, opts ...grpc.CallOption) (*invitation_category.InvitationCategoryBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(invitation_category.InvitationCategoryBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_DeleteInvitationCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	// Auth
	Verify(context.Context, *emptypb.Empty) (*AuthBaseResponse, error)
	LoginAdmin(context.Context, *LoginRequest) (*AuthBaseResponse, error)
	LoginCustomer(context.Context, *LoginRequest) (*AuthBaseResponse, error)
	LoginCommittee(context.Context, *LoginRequest) (*AuthBaseResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*AuthBaseResponse, error)
	Logout(context.Context, *LogoutRequest) (*AuthBaseResponse, error)
	// Users
	CreateUser(context.Context, *CreateUserRequest) (*AuthBaseResponse, error)
	GetAllUser(context.Context, *GetAllUserRequest) (*GetAllUserResponse, error)
	GetUserByID(context.Context, *GetUserByIDRequest) (*AuthBaseResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*AuthBaseResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*AuthBaseResponse, error)
	// Profiles
	GetProfile(context.Context, *emptypb.Empty) (*AuthBaseResponse, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*AuthBaseResponse, error)
	// Socials
	CreateSocial(context.Context, *social.CreateSocialRequest) (*social.SocialBaseResponse, error)
	GetSocial(context.Context, *social.GetSocialByIDRequest) (*social.SocialBaseResponse, error)
	GetAllSocial(context.Context, *social.GetAllSocialRequest) (*social.GetAllSocialResponse, error)
	UpdateSocial(context.Context, *social.UpdateSocialByIDRequest) (*social.SocialBaseResponse, error)
	DeleteSocial(context.Context, *social.DeleteSocialByIDRequest) (*social.SocialBaseResponse, error)
	// Invitation Categories
	CreateInvitationCategory(context.Context, *invitation_category.CreateInvitationCategoryRequest) (*invitation_category.InvitationCategoryBaseResponse, error)
	GetInvitationCategory(context.Context, *invitation_category.GetInvitationCategoryByIDRequest) (*invitation_category.InvitationCategoryBaseResponse, error)
	GetAllInvitationCategory(context.Context, *invitation_category.GetAllInvitationCategoryRequest) (*invitation_category.GetAllInvitationCategoryResponse, error)
	UpdateInvitationCategory(context.Context, *invitation_category.UpdateInvitationCategoryByIDRequest) (*invitation_category.InvitationCategoryBaseResponse, error)
	DeleteInvitationCategory(context.Context, *invitation_category.DeleteInvitationCategoryByIDRequest) (*invitation_category.InvitationCategoryBaseResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) Verify(context.Context, *emptypb.Empty) (*AuthBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedAuthServiceServer) LoginAdmin(context.Context, *LoginRequest) (*AuthBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAdmin not implemented")
}
func (UnimplementedAuthServiceServer) LoginCustomer(context.Context, *LoginRequest) (*AuthBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginCustomer not implemented")
}
func (UnimplementedAuthServiceServer) LoginCommittee(context.Context, *LoginRequest) (*AuthBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginCommittee not implemented")
}
func (UnimplementedAuthServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*AuthBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAuthServiceServer) Logout(context.Context, *LogoutRequest) (*AuthBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthServiceServer) CreateUser(context.Context, *CreateUserRequest) (*AuthBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAuthServiceServer) GetAllUser(context.Context, *GetAllUserRequest) (*GetAllUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUser not implemented")
}
func (UnimplementedAuthServiceServer) GetUserByID(context.Context, *GetUserByIDRequest) (*AuthBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedAuthServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*AuthBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAuthServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*AuthBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAuthServiceServer) GetProfile(context.Context, *emptypb.Empty) (*AuthBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedAuthServiceServer) ChangePassword(context.Context, *ChangePasswordRequest) (*AuthBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedAuthServiceServer) CreateSocial(context.Context, *social.CreateSocialRequest) (*social.SocialBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSocial not implemented")
}
func (UnimplementedAuthServiceServer) GetSocial(context.Context, *social.GetSocialByIDRequest) (*social.SocialBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSocial not implemented")
}
func (UnimplementedAuthServiceServer) GetAllSocial(context.Context, *social.GetAllSocialRequest) (*social.GetAllSocialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSocial not implemented")
}
func (UnimplementedAuthServiceServer) UpdateSocial(context.Context, *social.UpdateSocialByIDRequest) (*social.SocialBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSocial not implemented")
}
func (UnimplementedAuthServiceServer) DeleteSocial(context.Context, *social.DeleteSocialByIDRequest) (*social.SocialBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSocial not implemented")
}
func (UnimplementedAuthServiceServer) CreateInvitationCategory(context.Context, *invitation_category.CreateInvitationCategoryRequest) (*invitation_category.InvitationCategoryBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvitationCategory not implemented")
}
func (UnimplementedAuthServiceServer) GetInvitationCategory(context.Context, *invitation_category.GetInvitationCategoryByIDRequest) (*invitation_category.InvitationCategoryBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvitationCategory not implemented")
}
func (UnimplementedAuthServiceServer) GetAllInvitationCategory(context.Context, *invitation_category.GetAllInvitationCategoryRequest) (*invitation_category.GetAllInvitationCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllInvitationCategory not implemented")
}
func (UnimplementedAuthServiceServer) UpdateInvitationCategory(context.Context, *invitation_category.UpdateInvitationCategoryByIDRequest) (*invitation_category.InvitationCategoryBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvitationCategory not implemented")
}
func (UnimplementedAuthServiceServer) DeleteInvitationCategory(context.Context, *invitation_category.DeleteInvitationCategoryByIDRequest) (*invitation_category.InvitationCategoryBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInvitationCategory not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Verify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Verify(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_LoginAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).LoginAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_LoginAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).LoginAdmin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_LoginCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).LoginCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_LoginCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).LoginCustomer(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_LoginCommittee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).LoginCommittee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_LoginCommittee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).LoginCommittee(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAllUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAllUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAllUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAllUser(ctx, req.(*GetAllUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetUserByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUserByID(ctx, req.(*GetUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetProfile(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateSocial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(social.CreateSocialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateSocial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateSocial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateSocial(ctx, req.(*social.CreateSocialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetSocial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(social.GetSocialByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetSocial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetSocial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetSocial(ctx, req.(*social.GetSocialByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAllSocial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(social.GetAllSocialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAllSocial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAllSocial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAllSocial(ctx, req.(*social.GetAllSocialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateSocial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(social.UpdateSocialByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateSocial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateSocial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateSocial(ctx, req.(*social.UpdateSocialByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteSocial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(social.DeleteSocialByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteSocial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteSocial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteSocial(ctx, req.(*social.DeleteSocialByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateInvitationCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(invitation_category.CreateInvitationCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateInvitationCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateInvitationCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateInvitationCategory(ctx, req.(*invitation_category.CreateInvitationCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetInvitationCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(invitation_category.GetInvitationCategoryByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetInvitationCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetInvitationCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetInvitationCategory(ctx, req.(*invitation_category.GetInvitationCategoryByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAllInvitationCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(invitation_category.GetAllInvitationCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAllInvitationCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAllInvitationCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAllInvitationCategory(ctx, req.(*invitation_category.GetAllInvitationCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateInvitationCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(invitation_category.UpdateInvitationCategoryByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateInvitationCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateInvitationCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateInvitationCategory(ctx, req.(*invitation_category.UpdateInvitationCategoryByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteInvitationCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(invitation_category.DeleteInvitationCategoryByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteInvitationCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteInvitationCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteInvitationCategory(ctx, req.(*invitation_category.DeleteInvitationCategoryByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Verify",
			Handler:    _AuthService_Verify_Handler,
		},
		{
			MethodName: "LoginAdmin",
			Handler:    _AuthService_LoginAdmin_Handler,
		},
		{
			MethodName: "LoginCustomer",
			Handler:    _AuthService_LoginCustomer_Handler,
		},
		{
			MethodName: "LoginCommittee",
			Handler:    _AuthService_LoginCommittee_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _AuthService_RefreshToken_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthService_Logout_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _AuthService_CreateUser_Handler,
		},
		{
			MethodName: "GetAllUser",
			Handler:    _AuthService_GetAllUser_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _AuthService_GetUserByID_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _AuthService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AuthService_DeleteUser_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _AuthService_GetProfile_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _AuthService_ChangePassword_Handler,
		},
		{
			MethodName: "CreateSocial",
			Handler:    _AuthService_CreateSocial_Handler,
		},
		{
			MethodName: "GetSocial",
			Handler:    _AuthService_GetSocial_Handler,
		},
		{
			MethodName: "GetAllSocial",
			Handler:    _AuthService_GetAllSocial_Handler,
		},
		{
			MethodName: "UpdateSocial",
			Handler:    _AuthService_UpdateSocial_Handler,
		},
		{
			MethodName: "DeleteSocial",
			Handler:    _AuthService_DeleteSocial_Handler,
		},
		{
			MethodName: "CreateInvitationCategory",
			Handler:    _AuthService_CreateInvitationCategory_Handler,
		},
		{
			MethodName: "GetInvitationCategory",
			Handler:    _AuthService_GetInvitationCategory_Handler,
		},
		{
			MethodName: "GetAllInvitationCategory",
			Handler:    _AuthService_GetAllInvitationCategory_Handler,
		},
		{
			MethodName: "UpdateInvitationCategory",
			Handler:    _AuthService_UpdateInvitationCategory_Handler,
		},
		{
			MethodName: "DeleteInvitationCategory",
			Handler:    _AuthService_DeleteInvitationCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth_service.proto",
}
